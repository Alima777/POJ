#include <iostream>
#include <cmath>
#include <algorithm>
#include <string.h>
#include <string>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <stack>
using namespace std;
typedef long long ll;
const int maxn = 105;
const int maxint = 1e6+5;
int n;
char puz[maxn][maxn];
int dir[8][2] = {{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};

int DFS(string s,const int x,const int y){
    for(int i = 0;i < 8;i++){
        int j;
        for(j = 1;j < s.length();j++){
            int tempx = x+dir[i][0]*j;
            int tempy = y+dir[i][1]*j;
            if(tempx > n || tempx < 1 || tempy < 1 || tempy > n
               || s[j] != puz[tempx][tempy])
                break;
        }
        if(j >= s.length()){
            cout << x << "," << y << " " << x+dir[i][0]*(s.length()-1);
            cout << "," << y+dir[i][1]*(s.length()-1) << endl;
            return 1;
        }
    }
    return 0;
}
int main()
{
    cin >> n;
    for(int i = 1;i <= n;i++){
        for(int j = 1;j <= n;j++){
            cin >> puz[i][j];
        }
    }
    string s;
    while(cin >> s && s != "0"){
        int flag = 0;
        for(int i = 1;i <= n;i++){
            for(int j = 1;j <= n;j++){
                if(puz[i][j] == s[0]){
                    if(DFS(s,i,j)){
                        flag = 1;
                        break;
                    }
                }
            }
            if(flag == 1){
                break;
            }
        }
        if(flag == 0)
            cout << "Not found" << endl;
    }
    return 0;
}
